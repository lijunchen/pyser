/*
    Usage: re2c --tags ./tokenizer.re2c -o Tokenizer.cpp
*/

#include "Tokenizer.h"
#include <cstdio>
#include <string>
#include <vector>
#include <stack>
#include "Token.h"
#include <iostream>

using namespace std;

int whiteCount(char* line, char* end) {
  int count = 0;
  while (line != end) {
      if (*line == ' ') {
          count++;
      } else if (*line == '\t') {
          count += 4;
      }
      line++;
  }
  return count;
}

void processIndent(vector<Token>& toks, stack<int>& ind, int& nesting, char* line, char* end) {
  if (nesting)
    return;

  int indent = whiteCount(line, end);

  if (indent == ind.top()) {
      return;
  }

  if (indent > ind.top()) {
    toks.push_back(Token(Token::Type::NEWLINE));
    toks.push_back(Token(Token::Type::INDENT, string(indent, ' ')));
    ind.push(indent);
    return;
  }

  while (indent < ind.top()) {
    ind.pop();
    toks.push_back(Token(Token::Type::NEWLINE));
    toks.push_back(Token(Token::Type::DEDENT));
  }
}

vector<Token> Tokenizer::tokenize(const string& input) {
    const char* str = input.c_str();
    vector<Token> tokens;
    int nesting = 0;
    stack<int> ind;
    ind.push(0);
    const char *YYCURSOR = str;
    const char* YYMARKER;
    const char *t1, *t2, *t3;
again:
    /*!stags:re2c format = 'const char *@@;\n'; */
    /*!re2c
        re2c:yyfill:enable = 0;
        re2c:define:YYCTYPE = char;
        re2c:tags = 1;

        NUMBER = [0-9]+;
        NAME = [a-zA-Z_][a-zA-Z0-9_]*;
        SPACE = [ \t];
        COMMENT = [#] .*;
        STRING1 = "'" .* "'";
        STRING2 = '"' .* '"';
        STRING3 = '"""' [.\n]* '"""';
        
        @t1 NUMBER @t2 {
            tokens.push_back(Token(Token::Type::NUMBER, string(t1, t2 - t1)));
            goto again;
        }

        @t1 NAME @t2 {
            tokens.push_back(Token(Token::Type::NAME, string(t1, t2 - t1)));
            goto again;
        }

        "'" { tokens.push_back(Token(Token::Type::ERRORTOKEN)); goto again; }
        '"' { tokens.push_back(Token(Token::Type::ERRORTOKEN)); goto again; }
        "%" { tokens.push_back(Token(Token::Type::PERCENT, "%")); goto again; }
        "&" { tokens.push_back(Token(Token::Type::AMPER, "&")); goto again; }
        "(" { tokens.push_back(Token(Token::Type::LPAR, "(")); nesting++; goto again; }
        ")" { tokens.push_back(Token(Token::Type::RPAR, ")")); nesting--; goto again; }
        "*" { tokens.push_back(Token(Token::Type::STAR, "*")); goto again; }
        "+" { tokens.push_back(Token(Token::Type::PLUS, "+")); goto again; }
        "," { tokens.push_back(Token(Token::Type::COMMA, ",")); goto again; }
        "-" { tokens.push_back(Token(Token::Type::MINUS, "-")); goto again; }
        "." { tokens.push_back(Token(Token::Type::DOT, ".")); goto again; }
        "/" { tokens.push_back(Token(Token::Type::SLASH, "/")); goto again; }
        ":" { tokens.push_back(Token(Token::Type::COLON, ":")); goto again; }
        ";" { tokens.push_back(Token(Token::Type::SEMI, ";")); goto again; }
        "<" { tokens.push_back(Token(Token::Type::LESS, "<")); goto again; }
        "=" { tokens.push_back(Token(Token::Type::EQUAL, "=")); goto again; }
        ">" { tokens.push_back(Token(Token::Type::GREATER, ">")); goto again; }
        "@" { tokens.push_back(Token(Token::Type::AT, "@")); goto again; }
        "[" { tokens.push_back(Token(Token::Type::LSQB, "[")); nesting++; goto again; }
        "]" { tokens.push_back(Token(Token::Type::RSQB, "]")); nesting--; goto again; }
        "^" { tokens.push_back(Token(Token::Type::CIRCUMFLEX, "^")); goto again; }
        "{" { tokens.push_back(Token(Token::Type::LBRACE, "{")); nesting++; goto again; }
        "|" { tokens.push_back(Token(Token::Type::VBAR, "|")); goto again; }
        "}" { tokens.push_back(Token(Token::Type::RBRACE, "}")); nesting--; goto again; }
        "~" { tokens.push_back(Token(Token::Type::TILDE, "~")); goto again; }

        "!=" { tokens.push_back(Token(Token::Type::NOTEQUAL, "!=")); goto again; }
        "%=" { tokens.push_back(Token(Token::Type::PERCENTEQUAL, "%=")); goto again; }
        "&=" { tokens.push_back(Token(Token::Type::AMPEREQUAL, "&=")); goto again; }
        "**" { tokens.push_back(Token(Token::Type::DOUBLESTAR, "**")); goto again; }
        "*=" { tokens.push_back(Token(Token::Type::STAREQUAL, "*=")); goto again; }
        "+=" { tokens.push_back(Token(Token::Type::PLUSEQUAL, "+=")); goto again; }
        "-=" { tokens.push_back(Token(Token::Type::MINEQUAL, "-=")); goto again; }
        "->" { tokens.push_back(Token(Token::Type::RARROW, "->")); goto again; }
        "//" { tokens.push_back(Token(Token::Type::DOUBLESLASH, "//")); goto again; }
        "/=" { tokens.push_back(Token(Token::Type::SLASHEQUAL, "/=")); goto again; }
        ":=" { tokens.push_back(Token(Token::Type::COLONEQUAL, ":=")); goto again; }
        "<<" { tokens.push_back(Token(Token::Type::LEFTSHIFT, "<<")); goto again; }
        "<=" { tokens.push_back(Token(Token::Type::LESSEQUAL, "<=")); goto again; }
        "<>" { tokens.push_back(Token(Token::Type::NOTEQUAL, "<>")); goto again; }
        "==" { tokens.push_back(Token(Token::Type::EQEQUAL, "==")); goto again; }
        ">=" { tokens.push_back(Token(Token::Type::GREATEREQUAL, ">=")); goto again; }
        ">>" { tokens.push_back(Token(Token::Type::RIGHTSHIFT, ">>")); goto again; }
        "@=" { tokens.push_back(Token(Token::Type::ATEQUAL, "@=")); goto again; }
        "^=" { tokens.push_back(Token(Token::Type::CIRCUMFLEXEQUAL, "^=")); goto again; }
        "|=" { tokens.push_back(Token(Token::Type::VBAREQUAL, "|=")); goto again; }

        "**=" { tokens.push_back(Token(Token::Type::DOUBLESTAREQUAL, "**=")); goto again; }
        "..." { tokens.push_back(Token(Token::Type::ELLIPSIS, "...")); goto again; }
        "//=" { tokens.push_back(Token(Token::Type::DOUBLESLASHEQUAL, "//=")); goto again; }
        "<<=" { tokens.push_back(Token(Token::Type::LEFTSHIFTEQUAL, "<<=")); goto again; }
        ">>=" { tokens.push_back(Token(Token::Type::RIGHTSHIFTEQUAL, ">>=")); goto again; }

        // ignore blank lines
        @t1 [\n] @t2 SPACE* @t3 [\n] {
            YYCURSOR = t3;
            goto again;
        }

        @t1 [\n] @t2 SPACE+ @t3 .* {
            processIndent(tokens, ind, nesting, (char*)t2, (char*)t3);
            YYCURSOR = t3;
            goto again;
        }

        COMMENT { goto again; }

        @t1 STRING3 {
            tokens.push_back(Token(Token::Type::STRING, string(t1, YYCURSOR - t1)));
            goto again;
        }
        @t1 STRING2 {
            tokens.push_back(Token(Token::Type::STRING, string(t1, YYCURSOR - t1)));
            goto again;
        }
        @t1 STRING1 {
            tokens.push_back(Token(Token::Type::STRING, string(t1, YYCURSOR - t1)));
            goto again;
        }
        [ ] { goto again; }
        [\t] { goto again; }

        [\n] { tokens.push_back(Token(Token::Type::NEWLINE)); goto again; }

        [\x00] {
            processIndent(tokens, ind, nesting, (char*)YYCURSOR, (char*)YYCURSOR);
            tokens.push_back(Token(Token::Type::ENDMARKER));
        }

        * { goto done; }

    */
done:
   return tokens;
}
