#ifndef VISITOR_H
#define VISITOR_H

class Module;
class Interactive;
class Expression;
class FunctionType;
class FunctionDef;
class AsyncFunctionDef;
class ClassDef;
class Return;
class Delete;
class Assign;
class AugAssign;
class AnnAssign;
class For;
class AsyncFor;
class While;
class If;
class With;
class AsyncWith;
class Match;
class Raise;
class Try;
class Assert;
class Import;
class ImportFrom;
class Global;
class Nonlocal;
class Expr;
class Pass;
class Break;
class Continue;
class BoolOp;
class NamedExpr;
class BinOp;
class UnaryOp;
class Lambda;
class IfExp;
class Dict;
class Set;
class ListComp;
class SetComp;
class DictComp;
class GeneratorExp;
class Await;
class Yield;
class YieldFrom;
class Compare;
class Call;
class FormattedValue;
class JoinedStr;
class Constant;
class Num;
class Str;
class Attribute;
class Subscript;
class Starred;
class Name;
class List;
class Tuple;
class Slice;
class comprehension;
class exceptHandler;
class arguments;
class arg;
class keyword;
class alias;
class withitem;
class match_case;
class MatchValue;
class MatchSingleton;
class MatchSequence;
class MatchMapping;
class MatchClass;
class MatchStar;
class MatchAs;
class MatchOr;
class type_ignore;

class Visitor {
public:
    virtual void visit(Module&) = 0;
    virtual void visit(Interactive&) = 0;
    virtual void visit(Expression&) = 0;
    virtual void visit(FunctionType&) = 0;
    virtual void visit(FunctionDef&) = 0;
    virtual void visit(AsyncFunctionDef&) = 0;
    virtual void visit(ClassDef&) = 0;
    virtual void visit(Return&) = 0;
    virtual void visit(Delete&) = 0;
    virtual void visit(Assign&) = 0;
    virtual void visit(AugAssign&) = 0;
    virtual void visit(AnnAssign&) = 0;
    virtual void visit(For&) = 0;
    virtual void visit(AsyncFor&) = 0;
    virtual void visit(While&) = 0;
    virtual void visit(If&) = 0;
    virtual void visit(With&) = 0;
    virtual void visit(AsyncWith&) = 0;
    virtual void visit(Match&) = 0;
    virtual void visit(Raise&) = 0;
    virtual void visit(Try&) = 0;
    virtual void visit(Assert&) = 0;
    virtual void visit(Import&) = 0;
    virtual void visit(ImportFrom&) = 0;
    virtual void visit(Global&) = 0;
    virtual void visit(Nonlocal&) = 0;
    virtual void visit(Expr&) = 0;
    virtual void visit(Pass&) = 0;
    virtual void visit(Break&) = 0;
    virtual void visit(Continue&) = 0;
    virtual void visit(BoolOp&) = 0;
    virtual void visit(NamedExpr&) = 0;
    virtual void visit(BinOp&) = 0;
    virtual void visit(UnaryOp&) = 0;
    virtual void visit(Lambda&) = 0;
    virtual void visit(IfExp&) = 0;
    virtual void visit(Dict&) = 0;
    virtual void visit(Set&) = 0;
    virtual void visit(ListComp&) = 0;
    virtual void visit(SetComp&) = 0;
    virtual void visit(DictComp&) = 0;
    virtual void visit(GeneratorExp&) = 0;
    virtual void visit(Await&) = 0;
    virtual void visit(Yield&) = 0;
    virtual void visit(YieldFrom&) = 0;
    virtual void visit(Compare&) = 0;
    virtual void visit(Call&) = 0;
    virtual void visit(FormattedValue&) = 0;
    virtual void visit(JoinedStr&) = 0;
    virtual void visit(Constant&) = 0;
    virtual void visit(Str&) = 0;
    virtual void visit(Num&) = 0;
    virtual void visit(Attribute&) = 0;
    virtual void visit(Subscript&) = 0;
    virtual void visit(Starred&) = 0;
    virtual void visit(Name&) = 0;
    virtual void visit(List&) = 0;
    virtual void visit(Tuple&) = 0;
    virtual void visit(Slice&) = 0;
    virtual void visit(comprehension&) = 0;
    virtual void visit(exceptHandler&) = 0;
    virtual void visit(arguments&) = 0;
    virtual void visit(arg&) = 0;
    virtual void visit(keyword&) = 0;
    virtual void visit(alias&) = 0;
    virtual void visit(withitem&) = 0;
    virtual void visit(match_case&) = 0;
    virtual void visit(MatchValue&) = 0;
    virtual void visit(MatchSingleton&) = 0;
    virtual void visit(MatchSequence&) = 0;
    virtual void visit(MatchMapping&) = 0;
    virtual void visit(MatchClass&) = 0;
    virtual void visit(MatchStar&) = 0;
    virtual void visit(MatchAs&) = 0;
    virtual void visit(MatchOr&) = 0;
    virtual void visit(type_ignore&) = 0;
};

#endif /* VISITOR_H */
